1. js模块化开发发展史
    1) 模块化开发之原始写法
        模块就是实现特定功能的一组方法。
        只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。
        使用的时候，直接调用就行了。

        【注意】这种做法的缺点很明显："污染"了全局变量，无法保证不与其他模块发生变量名
        冲突，而且模块成员之间看不出直接关系。


    2) 模块化开发之对象写法
        为了解决上面原始写法的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面
        【注意】但是这样的写法会暴露所有模块成员，内部的状态可以被外部随意改写。


    3) 模块化开发之立即执行函数(闭包)
        使用"立即执行函数"，可以达到不暴露私有成员的目的。
        【注意】但却失去了拓展性

    4) 模块化开发之闭包放大模式
        如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用"放大模式"
        【注意】这个放大模式下，代码的先后循序有严格要求，新添加的代码段必须在原始功能代码段后面

    5) 模块化开发之闭包宽放大模式
        在浏览器环境中，模块的各个部分通常都是从网上获取的，有时无法知道哪个部分会先加载。如果采用上一节的
        写法，第一个执行的部分有可能加载一个不存在空对象，这时就要采用"宽放大模式"。



2 模块化开发标准规范

    因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。
    但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，
    我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就
    更重要了。目前，通行的Javascript模块规范共有两种：CommonJS和AMD（CMD）。我
    主要介绍AMD，但是要先从CommonJS讲起。

    1) CommonJS 规范
        在浏览器环境下，没有模块也不是特别大的问题，毕竟网页程序的复杂性有限；但是在
        服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。
        node.js的模块系统，就是参照CommonJS规范实现的。在CommonJS中，有一个全局
        性方法require()，用于加载模块。假定有一个数学模块math.js，就可以像下面这
        样加载。

        【注意】现在ES6也推出了模块规范

        CommonJS规范主要应用于 服务器 开发(如node.js开发)


        声明编写一个模块: 
        例子：
            这是在moduleA.js编写的

            function showA() {....}
            function showB() {....}

            module.exports = {
                outA: showA,
                outB: showB
            }
                

            引入外部模块：（同步执行）
            例子：
                这是在moduleB.js中引用moduleA.js模块
                var moduleA = require('moduleA.js');
                moduleA.outA();
                moduleA.outB();

    2) AMD 规范
        AMD是"Asynchronous Module Definition"的缩写，意思就是"异步模块定义"。它
        采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的
        语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。

        CommonJS规范主要应用于 客户端/浏览器 开发(如网页开发)

        声明编写一个模块:
        例子：
            这是在moduleA.js编写的

            function showA() {....}
            function showB() {....}

            define(function(){
                return {
                    outA: showA,
                    outB: showB
                }
            })

            引入外部模块：（异步执行）
            例子：
                这是在moduleB.js中引用moduleA.js模块
                require("moduleA.js", function(moduleA){
                    //这里的代码。模块引入之后执行。
                    moduleA.putA();
                    moduleA.outB();
                })

                alert("hello world");

    【彩蛋】 CMD 规范 是阿里内部的模块规范
